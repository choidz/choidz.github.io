{"version":3,"file":"static/js/995.e47dbbb7.chunk.js","mappings":"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","sources":["blog/post-page.js","blog/posts.js","blog/utils.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Link, Navigate, useParams } from \"react-router-dom\";\nimport ReactMarkdown from \"react-markdown\";\nimport { blogPaths } from \"../routes/paths\";\nimport posts from \"./posts\";\nimport {\n  calculateReadingTime,\n  formatDate,\n  parseMarkdownTable,\n  splitMarkdownContent,\n} from \"./utils\";\n\nconst markdownComponents = {\n  h2: ({ node, children, ...props }) => (\n    <h2 className='mt-12 text-2xl font-semibold text-slate-900 first:mt-0' {...props}>\n      {children}\n    </h2>\n  ),\n  h3: ({ node, children, ...props }) => (\n    <h3 className='mt-8 text-xl font-semibold text-slate-900' {...props}>\n      {children}\n    </h3>\n  ),\n  p: ({ node, children, ...props }) => (\n    <p className='mt-4 leading-relaxed text-slate-700' {...props}>\n      {children}\n    </p>\n  ),\n  ul: ({ node, children, ...props }) => (\n    <ul className='mt-4 list-disc space-y-2 pl-6 text-slate-700' {...props}>\n      {children}\n    </ul>\n  ),\n  ol: ({ node, children, ...props }) => (\n    <ol className='mt-4 list-decimal space-y-2 pl-6 text-slate-700' {...props}>\n      {children}\n    </ol>\n  ),\n  li: ({ node, children, ...props }) => (\n    <li className='leading-relaxed' {...props}>\n      {children}\n    </li>\n  ),\n  blockquote: ({ node, children, ...props }) => (\n    <blockquote\n      className='mt-6 border-l-4 border-indigo-200 bg-indigo-50/60 p-4 italic text-indigo-900'\n      {...props}>\n      {children}\n    </blockquote>\n  ),\n  code({ node, inline, className, children, ...props }) {\n    if (inline) {\n      return (\n        <code\n          className='rounded bg-slate-100 px-1.5 py-0.5 font-mono text-sm text-slate-800'\n          {...props}>\n          {children}\n        </code>\n      );\n    }\n    return (\n      <pre className='mt-6 overflow-x-auto rounded-xl bg-slate-900 p-4 text-sm text-slate-100'>\n        <code {...props}>{children}</code>\n      </pre>\n    );\n  },\n};\n\nconst tableMarkdownComponents = {\n  ...markdownComponents,\n  p: ({ children }) => <>{children}</>,\n};\n\nfunction MarkdownTable({ table }) {\n  if (!table.headers.length) {\n    return null;\n  }\n\n  return (\n    <div className='mt-8 overflow-x-auto rounded-2xl border border-slate-200 bg-slate-50'>\n      <table className='min-w-full divide-y divide-slate-200 text-left text-sm'>\n        <thead className='bg-white'>\n          <tr>\n            {table.headers.map((header, index) => (\n              <th\n                key={index}\n                className='px-4 py-3 font-semibold uppercase tracking-wide text-slate-500'>\n                <ReactMarkdown components={tableMarkdownComponents}>\n                  {header}\n                </ReactMarkdown>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody className='divide-y divide-slate-200 bg-white'>\n          {table.rows.map((row, rowIndex) => (\n            <tr key={rowIndex} className='hover:bg-slate-50'>\n              {row.map((cell, cellIndex) => (\n                <td key={cellIndex} className='px-4 py-3 align-top text-slate-600'>\n                  <ReactMarkdown components={tableMarkdownComponents}>\n                    {cell || \"\"}\n                  </ReactMarkdown>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default function PostPage() {\n  const { slug } = useParams();\n  const post = posts.find((item) => item.slug === slug);\n\n  const [segments, setSegments] = useState([]);\n  const [readingTime, setReadingTime] = useState(post?.readingMinutes ?? 1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!post) {\n      return;\n    }\n\n    let cancelled = false;\n\n    async function loadContent() {\n      try {\n        setIsLoading(true);\n        const response = await fetch(post.contentPath);\n        if (!response.ok) {\n          throw new Error(`콘텐츠를 불러오지 못했습니다 (status ${response.status})`);\n        }\n        const markdown = await response.text();\n        if (cancelled) {\n          return;\n        }\n        setSegments(splitMarkdownContent(markdown));\n        setReadingTime(calculateReadingTime(markdown));\n        setIsLoading(false);\n      } catch (fetchError) {\n        if (!cancelled) {\n          setError(fetchError.message);\n          setIsLoading(false);\n        }\n      }\n    }\n\n    loadContent();\n\n    return () => {\n      cancelled = true;\n    };\n  }, [post]);\n\n  if (!post) {\n    return <Navigate to={blogPaths.home} replace />;\n  }\n\n  const gradient = post.coverGradient ?? \"from-indigo-500 to-blue-500\";\n\n  return (\n    <div className='min-h-screen bg-slate-100'>\n      <div className='border-b border-slate-200 bg-white'>\n        <div className='mx-auto flex w-full max-w-4xl items-center justify-between px-4 py-4 sm:px-6'>\n          <Link\n            to={blogPaths.home}\n            className='text-sm font-medium text-indigo-600 transition hover:text-indigo-700'>\n            ← 글 목록으로 돌아가기\n          </Link>\n        </div>\n      </div>\n      <div className='mx-auto max-w-4xl px-4 py-10 sm:px-6 sm:py-12'>\n        <div\n          aria-hidden='true'\n          className={`mb-8 h-48 w-full rounded-3xl bg-gradient-to-br ${gradient}`}\n        />\n        <article className='rounded-3xl border border-slate-200 bg-white p-6 shadow-sm sm:p-10'>\n          <header className='flex flex-col gap-6'>\n            <div className='flex flex-wrap items-center gap-3 text-xs text-slate-500 sm:text-sm'>\n              <time dateTime={post.date}>{formatDate(post.date)}</time>\n              <span className='hidden text-slate-300 sm:inline'>•</span>\n              <span>{`${readingTime}분 분량`}</span>\n            </div>\n            <div className='space-y-4'>\n              <h1 className='text-3xl font-bold leading-tight text-slate-900 sm:text-4xl'>\n                {post.title}\n              </h1>\n              <p className='text-base leading-relaxed text-slate-600 sm:text-lg'>\n                {post.description}\n              </p>\n              <div className='flex flex-wrap gap-2'>\n                {post.tags.map((tag) => (\n                  <span\n                    key={tag}\n                    className='rounded-full bg-indigo-50 px-3 py-1 text-xs font-medium text-indigo-600'>\n                    {tag}\n                  </span>\n                ))}\n              </div>\n            </div>\n          </header>\n          <section className='mt-10 space-y-8'>\n            {isLoading && !segments.length ? (\n              <p className='text-sm text-slate-500'>콘텐츠를 불러오는 중입니다...</p>\n            ) : null}\n            {error ? (\n              <p className='rounded-lg bg-rose-50 p-4 text-sm text-rose-600'>{error}</p>\n            ) : null}\n            {!error &&\n              segments.map((segment, index) => {\n                if (segment.type === \"table\") {\n                  const table = parseMarkdownTable(segment.value);\n                  return <MarkdownTable key={`table-${index}`} table={table} />;\n                }\n\n                return (\n                  <ReactMarkdown\n                    key={`md-${index}`}\n                    components={markdownComponents}>\n                    {segment.value.trim()}\n                  </ReactMarkdown>\n                );\n              })}\n          </section>\n        </article>\n      </div>\n    </div>\n  );\n}\n","const posts = [\n  {\n    slug: \"elasticsearch-core-guide\",\n    title: \"Elasticsearch 핵심 개념 정리\",\n    description:\n      \"클러스터, 샤드, 매핑부터 모니터링 지표까지 Elasticsearch 구조와 운영 개념을 정리했습니다.\",\n    date: \"2024-05-02\",\n    tags: [\"#Elasticsearch\", \"#검색\", \"#운영\"],\n    coverGradient: \"from-emerald-500 via-teal-500 to-blue-500\",\n    readingMinutes: 3,\n    contentPath: \"/posts/elasticsearch-core-guide.md\",\n  },\n];\n\nexport default posts;\n","const formatter = new Intl.DateTimeFormat(\"ko-KR\", {\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\",\n});\n\nconst TABLE_BLOCK_PATTERN =\n  String.raw`(^\\|.*\\|\\r?\\n\\|[-:|\\s]+\\|\\r?\\n(?:\\|.*\\|\\r?\\n?)*)`;\n\nexport function formatDate(dateString) {\n  try {\n    return formatter.format(new Date(dateString));\n  } catch (error) {\n    return dateString;\n  }\n}\n\nexport function calculateReadingTime(content) {\n  if (!content) {\n    return 1;\n  }\n  const words = content\n    .replace(/\\s+/g, \" \")\n    .trim()\n    .split(\" \")\n    .filter(Boolean).length;\n  return Math.max(1, Math.round(words / 200));\n}\n\nexport function splitMarkdownContent(content) {\n  if (!content) {\n    return [];\n  }\n  const results = [];\n  const tableRegex = new RegExp(TABLE_BLOCK_PATTERN, \"gm\");\n  let lastIndex = 0;\n  let match;\n\n  while ((match = tableRegex.exec(content)) !== null) {\n    const { index } = match;\n    if (index > lastIndex) {\n      const markdownBlock = content.slice(lastIndex, index);\n      if (markdownBlock.trim()) {\n        results.push({ type: \"markdown\", value: markdownBlock });\n      }\n    }\n\n    results.push({ type: \"table\", value: match[0].trim() });\n    lastIndex = tableRegex.lastIndex;\n  }\n\n  if (lastIndex < content.length) {\n    const markdownBlock = content.slice(lastIndex);\n    if (markdownBlock.trim()) {\n      results.push({ type: \"markdown\", value: markdownBlock });\n    }\n  }\n\n  return results.length ? results : [{ type: \"markdown\", value: content }];\n}\n\nexport function parseMarkdownTable(tableBlock) {\n  if (!tableBlock) {\n    return { headers: [], rows: [] };\n  }\n\n  const lines = tableBlock\n    .trim()\n    .split(/\\r?\\n/)\n    .filter(Boolean);\n\n  if (lines.length < 2) {\n    return { headers: [], rows: [] };\n  }\n\n  const headers = extractCells(lines[0]);\n  const rows = lines\n    .slice(2)\n    .map((line) => extractCells(line))\n    .filter((cells) => cells.some((cell) => cell));\n\n  return { headers, rows };\n}\n\nfunction extractCells(line) {\n  return line\n    .split(\"|\")\n    .slice(1, -1)\n    .map((cell) => cell.trim());\n}\n"],"names":["markdownComponents","h2","_ref","node","children","props","_jsx","className","h3","_ref2","p","_ref3","ul","_ref4","ol","_ref5","li","_ref6","blockquote","_ref7","code","_ref8","inline","tableMarkdownComponents","_ref9","_Fragment","MarkdownTable","_ref10","table","headers","length","_jsxs","map","header","index","ReactMarkdown","components","rows","row","rowIndex","cell","cellIndex","PostPage","_post$readingMinutes","_post$coverGradient","slug","useParams","post","posts","find","item","segments","setSegments","useState","readingTime","setReadingTime","readingMinutes","isLoading","setIsLoading","error","setError","useEffect","cancelled","async","response","fetch","contentPath","ok","Error","concat","status","markdown","text","splitMarkdownContent","calculateReadingTime","fetchError","message","loadContent","Navigate","to","blogPaths","home","replace","gradient","coverGradient","Link","dateTime","date","formatDate","title","description","tags","tag","segment","type","parseMarkdownTable","value","trim","formatter","Intl","DateTimeFormat","year","month","day","TABLE_BLOCK_PATTERN","String","raw","_templateObject","_taggedTemplateLiteral","dateString","format","Date","content","words","split","filter","Boolean","Math","max","round","results","tableRegex","RegExp","match","lastIndex","exec","markdownBlock","slice","push","tableBlock","lines","extractCells","line","cells","some"],"sourceRoot":""}