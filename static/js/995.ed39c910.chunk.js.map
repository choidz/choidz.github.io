{"version":3,"file":"static/js/995.ed39c910.chunk.js","mappings":"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","sources":["blog/post-page.js","blog/usePosts.js","blog/utils.js"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { Link, Navigate, useParams } from \"react-router-dom\";\nimport remarkGfm from \"remark-gfm\";\nimport { blogPaths } from \"../routes/paths\";\nimport usePosts from \"./usePosts\";\nimport {\n  calculateReadingTime,\n  formatDate,\n  parseMarkdownTable,\n  splitMarkdownContent,\n} from \"./utils\";\n\nconst markdownComponents = {\n  h2: ({ node, children, ...props }) => (\n    <h2\n      className='mt-12 text-2xl font-semibold text-brand-foreground first:mt-0'\n      {...props}>\n      {children}\n    </h2>\n  ),\n  h3: ({ node, children, ...props }) => (\n    <h3 className='mt-8 text-xl font-semibold text-brand-foreground' {...props}>\n      {children}\n    </h3>\n  ),\n  p: ({ node, children, ...props }) => (\n    <p className='mt-4 leading-relaxed text-brand-muted' {...props}>\n      {children}\n    </p>\n  ),\n  ul: ({ node, children, ...props }) => (\n    <ul className='mt-4 list-disc space-y-2 pl-6 text-brand-muted' {...props}>\n      {children}\n    </ul>\n  ),\n  ol: ({ node, children, ...props }) => (\n    <ol className='mt-4 list-decimal space-y-2 pl-6 text-brand-muted' {...props}>\n      {children}\n    </ol>\n  ),\n  li: ({ node, children, ...props }) => (\n    <li className='leading-relaxed' {...props}>\n      {children}\n    </li>\n  ),\n  blockquote: ({ node, children, ...props }) => (\n    <blockquote\n      className='mt-6 border-l-4 border-brand-border-strong bg-brand-accent-soft/60 p-4 italic text-brand-foreground'\n      {...props}>\n      {children}\n    </blockquote>\n  ),\n  code({ node, inline, className, children, ...props }) {\n    if (inline) {\n      return (\n        <code\n          className='rounded bg-brand-accent-soft px-1.5 py-0.5 font-mono text-sm text-brand-foreground'\n          {...props}>\n          {children}\n        </code>\n      );\n    }\n    return (\n      <pre className='mt-6 overflow-x-auto rounded-xl bg-brand-foreground p-4 text-sm text-brand-background'>\n        <code {...props}>{children}</code>\n      </pre>\n    );\n  },\n};\n\nconst tableMarkdownComponents = {\n  ...markdownComponents,\n  p: ({ children }) => <>{children}</>,\n};\n\nfunction MarkdownTable({ table }) {\n  if (!table.headers.length) return null;\n\n  return (\n    <div className='mt-8 overflow-x-auto rounded-2xl border border-brand-border bg-brand-background'>\n      <table className='min-w-full divide-y divide-brand-border text-left text-sm'>\n        <thead className='bg-brand-surface'>\n          <tr>\n            {table.headers.map((header, index) => (\n              <th\n                key={index}\n                className='px-4 py-3 font-semibold uppercase tracking-wide text-brand-muted'>\n                <ReactMarkdown\n                  components={tableMarkdownComponents}\n                  remarkPlugins={[remarkGfm]}>\n                  {header}\n                </ReactMarkdown>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody className='divide-y divide-brand-border bg-brand-surface'>\n          {table.rows.map((row, rowIndex) => (\n            <tr key={rowIndex} className='hover:bg-brand-accent-soft/40'>\n              {row.map((cell, cellIndex) => (\n                <td\n                  key={cellIndex}\n                  className='px-4 py-3 align-top text-brand-muted'>\n                  <ReactMarkdown\n                    components={tableMarkdownComponents}\n                    remarkPlugins={[remarkGfm]}>\n                    {cell || \"\"}\n                  </ReactMarkdown>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default function PostPage() {\n  const { slug } = useParams();\n  const { posts, isLoading, error } = usePosts();\n  const post = useMemo(\n    () => posts.find((item) => item.slug === slug),\n    [posts, slug]\n  );\n\n  const [segments, setSegments] = useState([]);\n  const [readingTime, setReadingTime] = useState(post?.readingMinutes ?? 1);\n  const [contentError, setContentError] = useState(null);\n  const [contentLoading, setContentLoading] = useState(true);\n\n  useEffect(() => {\n    if (!post) return;\n\n    let cancelled = false;\n\n    async function loadContent() {\n      try {\n        setContentLoading(true);\n        const response = await fetch(post.contentPath);\n        if (!response.ok) {\n          throw new Error(\n            `콘텐츠를 불러오지 못했습니다 (status ${response.status})`\n          );\n        }\n        const markdown = await response.text();\n        if (cancelled) return;\n\n        setSegments(splitMarkdownContent(markdown));\n        setReadingTime(calculateReadingTime(markdown));\n        setContentLoading(false);\n      } catch (fetchError) {\n        if (!cancelled) {\n          setContentError(fetchError.message);\n          setContentLoading(false);\n        }\n      }\n    }\n\n    loadContent();\n    return () => {\n      cancelled = true;\n    };\n  }, [post]);\n\n  if (isLoading) {\n    return (\n      <div className='min-h-screen bg-brand-background'>\n        <div className='mx-auto max-w-4xl px-4 py-10 sm:px-6 sm:py-12'>\n          <p className='text-sm text-brand-muted'>\n            게시글 정보를 불러오는 중입니다…\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className='min-h-screen bg-brand-background'>\n        <div className='mx-auto max-w-4xl px-4 py-10 sm:px-6 sm:py-12'>\n          <p className='rounded-lg bg-rose-50 p-4 text-sm text-rose-600'>\n            {error}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!post) {\n    return <Navigate to={blogPaths.home} replace />;\n  }\n\n  return (\n    <div className='min-h-screen bg-brand-background'>\n      <div className='border-b border-brand-border bg-brand-surface'>\n        <div className='mx-auto flex w-full max-w-4xl items-center justify-between px-4 py-4 sm:px-6'>\n          <Link\n            to={blogPaths.home}\n            className='text-sm font-medium text-brand-accent transition hover:text-brand-accent-hover'>\n            ← 글 목록으로 돌아가기\n          </Link>\n        </div>\n      </div>\n\n      <div className='mx-auto max-w-4xl px-4 py-10 sm:px-6 sm:py-12'>\n        <article className='rounded-3xl border border-brand-border bg-brand-surface p-6 shadow-sm sm:p-10'>\n          <header className='flex flex-col gap-6'>\n            <div className='flex flex-wrap items-center gap-3 text-xs text-brand-muted sm:text-sm'>\n              <time dateTime={post.date}>{formatDate(post.date)}</time>\n              <span className='hidden text-brand-border-strong sm:inline'>•</span>\n              <span>{`${readingTime}분 분량`}</span>\n            </div>\n\n            <div className='space-y-4'>\n              <h1 className='text-3xl font-bold leading-tight text-brand-foreground sm:text-4xl'>\n                {post.title}\n              </h1>\n              <p className='text-base leading-relaxed text-brand-muted sm:text-lg'>\n                {post.description}\n              </p>\n              <div className='flex flex-wrap gap-2'>\n                {post.tags.map((tag) => (\n                  <span\n                    key={tag}\n                    className='rounded-full bg-brand-accent-soft px-3 py-1 text-xs font-medium text-brand-accent'>\n                    {tag}\n                  </span>\n                ))}\n              </div>\n            </div>\n          </header>\n\n          <section className='mt-10 space-y-8'>\n            {contentLoading && !segments.length ? (\n              <p className='text-sm text-brand-muted'>\n                콘텐츠를 불러오는 중입니다...\n              </p>\n            ) : null}\n\n            {contentError ? (\n              <p className='rounded-lg bg-rose-50 p-4 text-sm text-rose-600'>\n                {contentError}\n              </p>\n            ) : null}\n\n            {!contentError &&\n              segments.map((segment, index) => {\n                if (segment.type === \"table\") {\n                  const table = parseMarkdownTable(segment.value);\n                  return <MarkdownTable key={`table-${index}`} table={table} />;\n                }\n\n                return (\n                  <ReactMarkdown\n                    key={`md-${index}`}\n                    components={markdownComponents}\n                    remarkPlugins={[remarkGfm]}>\n                    {segment.value.trim()}\n                  </ReactMarkdown>\n                );\n              })}\n          </section>\n        </article>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nconst POSTS_MANIFEST_URL = \"/posts/index.json\";\n\nexport function usePosts() {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let cancelled = false;\n\n    async function loadPosts() {\n      try {\n        setIsLoading(true);\n        const response = await fetch(POSTS_MANIFEST_URL);\n        if (!response.ok) {\n          throw new Error(`포스트 목록을 불러오지 못했습니다 (status ${response.status})`);\n        }\n        const data = await response.json();\n        if (!cancelled) {\n          setPosts(Array.isArray(data) ? data : []);\n          setIsLoading(false);\n        }\n      } catch (fetchError) {\n        if (!cancelled) {\n          setError(fetchError.message);\n          setIsLoading(false);\n        }\n      }\n    }\n\n    loadPosts();\n\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  return { posts, isLoading, error };\n}\n\nexport default usePosts;\n","const formatter = new Intl.DateTimeFormat(\"ko-KR\", {\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\",\n});\n\nconst TABLE_BLOCK_PATTERN =\n  String.raw`(^\\|.*\\|\\r?\\n\\|[-:|\\s]+\\|\\r?\\n(?:\\|.*\\|\\r?\\n?)*)`;\n\nexport function formatDate(dateString) {\n  try {\n    return formatter.format(new Date(dateString));\n  } catch (error) {\n    return dateString;\n  }\n}\n\nexport function calculateReadingTime(content) {\n  if (!content) {\n    return 1;\n  }\n  const words = content\n    .replace(/\\s+/g, \" \")\n    .trim()\n    .split(\" \")\n    .filter(Boolean).length;\n  return Math.max(1, Math.round(words / 200));\n}\n\nexport function splitMarkdownContent(content) {\n  if (!content) {\n    return [];\n  }\n  const results = [];\n  const tableRegex = new RegExp(TABLE_BLOCK_PATTERN, \"gm\");\n  let lastIndex = 0;\n  let match;\n\n  while ((match = tableRegex.exec(content)) !== null) {\n    const { index } = match;\n    if (index > lastIndex) {\n      const markdownBlock = content.slice(lastIndex, index);\n      if (markdownBlock.trim()) {\n        results.push({ type: \"markdown\", value: markdownBlock });\n      }\n    }\n\n    results.push({ type: \"table\", value: match[0].trim() });\n    lastIndex = tableRegex.lastIndex;\n  }\n\n  if (lastIndex < content.length) {\n    const markdownBlock = content.slice(lastIndex);\n    if (markdownBlock.trim()) {\n      results.push({ type: \"markdown\", value: markdownBlock });\n    }\n  }\n\n  return results.length ? results : [{ type: \"markdown\", value: content }];\n}\n\nexport function parseMarkdownTable(tableBlock) {\n  if (!tableBlock) {\n    return { headers: [], rows: [] };\n  }\n\n  const lines = tableBlock\n    .trim()\n    .split(/\\r?\\n/)\n    .filter(Boolean);\n\n  if (lines.length < 2) {\n    return { headers: [], rows: [] };\n  }\n\n  const headers = extractCells(lines[0]);\n  const rows = lines\n    .slice(2)\n    .map((line) => extractCells(line))\n    .filter((cells) => cells.some((cell) => cell));\n\n  return { headers, rows };\n}\n\nfunction extractCells(line) {\n  return line\n    .split(\"|\")\n    .slice(1, -1)\n    .map((cell) => cell.trim());\n}\n"],"names":["markdownComponents","h2","_ref","node","children","props","_jsx","className","h3","_ref2","p","_ref3","ul","_ref4","ol","_ref5","li","_ref6","blockquote","_ref7","code","_ref8","inline","tableMarkdownComponents","_ref9","_Fragment","MarkdownTable","_ref10","table","headers","length","_jsxs","map","header","index","ReactMarkdown","components","remarkPlugins","remarkGfm","rows","row","rowIndex","cell","cellIndex","PostPage","_post$readingMinutes","slug","useParams","posts","isLoading","error","usePosts","post","useMemo","find","item","segments","setSegments","useState","readingTime","setReadingTime","readingMinutes","contentError","setContentError","contentLoading","setContentLoading","useEffect","cancelled","async","response","fetch","contentPath","ok","Error","concat","status","markdown","text","splitMarkdownContent","calculateReadingTime","fetchError","message","loadContent","Link","to","blogPaths","home","dateTime","date","formatDate","title","description","tags","tag","segment","type","parseMarkdownTable","value","trim","Navigate","replace","setPosts","setIsLoading","setError","data","json","Array","isArray","loadPosts","formatter","Intl","DateTimeFormat","year","month","day","TABLE_BLOCK_PATTERN","String","raw","_templateObject","_taggedTemplateLiteral","dateString","format","Date","content","words","split","filter","Boolean","Math","max","round","results","tableRegex","RegExp","match","lastIndex","exec","markdownBlock","slice","push","tableBlock","lines","extractCells","line","cells","some"],"sourceRoot":""}